enum UserRole {
  ADMIN
  CONTRIBUTOR
  GENERAL
}

directive @auth(requires: UserRole = ADMIN) on OBJECT | FIELD_DEFINITION

type Query {
  me: User
  user(id: ID!): User @auth(requires: CONTRIBUTOR)
  users(filter: String, limit: Int): [User]! @auth(requires: ADMIN)
  idiom(id: ID, slug: String): Idiom
  idioms(cursor: String, filter: String, locale: String, limit: Int): IdiomConnection!
  languages: [Language!]!
  countries(languageKey: String): [Country!]!
  idiomChangeProposal(id: ID): IdiomChangeProposal! @auth(requires: ADMIN)
  idiomChangeProposals(cursor: String, filter: String, limit: Int): IdiomChangeProposalConnection! @auth(requires: ADMIN)
}

type User {
  id: ID!
  name: String!
  avatar: String
  role: UserRole
  providers: [Login]!
}

enum ProviderType {
  GOOGLE
  FACEBOOK
}

type Login @auth(requires: ADMIN) {
  externalId: ID!
  name: String!
  email: String
  avatar: String
  type: ProviderType!
}

type Mutation {
  updateIdiom(idiom: IdiomUpdateInput!): IdiomOperationResult! @auth(requires: GENERAL)
  createIdiom(idiom: IdiomCreateInput!): IdiomOperationResult! @auth(requires: GENERAL)
  deleteIdiom(idiomId: ID!): OperationResult! @auth(requires: ADMIN)
  addEquivalent(idiomId: ID!, equivalentId: ID!): OperationResult! @auth(requires: GENERAL)
  removeEquivalent(idiomId: ID!, equivalentId: ID!): OperationResult! @auth(requires: GENERAL)
  acceptIdiomChangeProposal(proposalId: ID!): Boolean! @auth(requires: ADMIN)
  rejectIdiomChangeProposal(proposalId: ID!): Boolean! @auth(requires: ADMIN)
}

enum OperationStatus {
  SUCCESS
  FAILURE
  PENDING
}

type OperationResult {
  status: OperationStatus!
  message: String
}

type IdiomOperationResult {
  status: OperationStatus!
  message: String
  idiom: Idiom
}

type IdiomConnection {
  edges: [IdiomEdge!]!
  pageInfo: PageInfo!
}

type IdiomEdge {
  cursor: String!
  node: Idiom!
}

type PageInfo {
  hasNextPage: Boolean!
  endCursor: String!
}

input IdiomCreateInput {
  title: String!
  description: String
  languageKey: String!
  countryKeys: [String!]
  tags: [String!]
  transliteration: String
  literalTranslation: String
  relatedIdiomId: ID
}

input IdiomUpdateInput {
  id: ID!
  title: String
  description: String
  transliteration: String
  literalTranslation: String
  tags: [String!]
  countryKeys: [String!]
}

type Idiom {
  id: ID!
  slug: String!
  title: String!
  description: String
  tags: [String!]!
  transliteration: String
  literalTranslation: String
  equivalents: [Idiom!]!
  language: Language!
  createdAt: String!
  createdBy: User
  updatedAt: String
  updatedBy: User
}

type Language {
  languageName: String!
  languageNativeName: String!
  languageKey: String!
  countries: [Country!]!
}

type Country {
  countryKey: String!
  countryName: String!
  countryNativeName: String!
  emojiFlag: String!
}

type IdiomChangeProposalConnection {
  edges: [IdiomChangeProposalEdge!]!
  pageInfo: PageInfo!
}

type IdiomChangeProposalEdge {
  cursor: String!
  node: IdiomChangeProposal!
}

type IdiomChangeProposal {
  id: ID!
  body: String!
}

schema {
  query: Query
  mutation: Mutation
}
